<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_spar2_udh.Table</api_name>
        <client_callable>false</client_callable>
        <description>Manages update of one table.</description>
        <name>Table</name>
        <script><![CDATA[var Table = Class.create();
Table.prototype = (function Table_proto(s) {
	var p = {};
	var TYPE = p.type = 'Table';

	var log = gs;

	p.initialize = function initialize(updateSet, tableName, filter) {

		function visitRecords(recordFn, termFn) {
			var ids, rGr;

			recordFn = recordFn || function() { };
			termFn = termFn || function() { updateSet.reset(); };
			ids = [];

			rGr = new GlideRecord(tableName);
			if (filter) {
				rGr.addEncodedQuery(filter);
			}
			rGr.query();
			log.debug('Found {0} records in {1} with filter {2}',
					  rGr.getRowCount(), tableName, filter + '');
			while (rGr.next()) {
				recordFn(rGr);
				ids.push(rGr.getUniqueValue());
			}
			termFn();
			return ids;
		} this.visitRecords = visitRecords;

		function saveRecords(recordFn, recordIds) {
			var f = filter;

			if (!recordFn) recordFn = function() { };
			if (recordIds && recordIds.length > 0) {
				f = (f ? f + '^' : '') + 'sys_idIN' + recordIds.join(',');
			}
			return visitRecords(
				function visitRecord(rGr) {
					recordFn(rGr);
					updateSet.saveRecord(rGr);
				}
			);
		} this.saveRecords = saveRecords;

		function deleteMultiple() {
			var rGr = new GlideRecord(tableName);
			if (filter) {
				rGr.addEncodedQuery(filter);
			}

			rGr.query();
			rGr.deleteMultiple();
		} this.deleteMultiple = deleteMultiple;

		function visitChildren(childTable, parentRef, filter, recordFn) {
			if (!recordFn) recordFn = function() { };
			var parentED, parentTable;
			var children = [];

			var rGr = new GlideRecord(childTable);
			rGr.initialize();
			parentED = rGr[parentRef].getED();
			parentTable = parentED.getName();

			rGr = new GlideRecord(childTable);
			if (filter) {
				rGr.addEncodedQuery(filter);
			}

			rGr.query();

			while (rGr.next()) {
				recordFn(rGr);
				children.push(rGr.getUniqueValue());
			}
			return children;
		} this.visitChildren = visitChildren;

		function saveChildrenInTable(childTable, parentRef, filter, recordFn) {
			if (!recordFn) recordFn = function() { };
			return visitChildren(childTable, filter, function(rGr) {
				recordFn(rGr);
				saveRecord(rGr);
			});
		} this.saveChildrenInTable = saveChildrenInTable;

		function saveChildren(children, childTable, parentRef, filter, recordFn) {
			if (!recordFn) {
				recordFn = function() { };
			}
			filter = (filter ? filter + '^' : '') + parentRef + 'IN' + children.join(',');
			return visitRecords(function(rGr) {
				recordFn(rGr);
				updateSet.saveRecord(rGr);
			});
		} this.saveChildren = saveChildren;
	};

	return p;
})(Table);]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-08-15 02:34:56</sys_created_on>
        <sys_id>a48f1cb7dbf35b00d89b596e5e96192f</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Table</sys_name>
        <sys_package display_value="Update Helper" source="x_spar2_udh">9ba11e67dbbf1b00d89b596e5e961983</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Update Helper">9ba11e67dbbf1b00d89b596e5e961983</sys_scope>
        <sys_update_name>sys_script_include_a48f1cb7dbf35b00d89b596e5e96192f</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-15 04:26:52</sys_updated_on>
    </sys_script_include>
</record_update>
